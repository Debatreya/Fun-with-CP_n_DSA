# Longest Common Subsequence

## Recursive solution:
class Solution {
private:
    int f(int idx1, int idx2, string &text1, string &text2){
        if(idx1 == text1.length() || idx2 == text2.length())
            return 0;
        if(text1[idx1] == text2[idx2]){
            return 1+f(idx1+1, idx2+1, text1, text2);
        }else{
            return max(f(idx1+1, idx2, text1, text2), f(idx1, idx2+1, text1, text2));
        }
    }
public:
    int longestCommonSubsequence(string text1, string text2) {
        return f(0, 0, text1, text2);
    }
};

## Memoization Solution
class Solution {
private:
    int f(int idx1, int idx2, string &text1, string &text2, vector<vector<int>> &dp){
        if(idx1 == text1.length() || idx2 == text2.length())
            return 0;
        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];
        if(text1[idx1] == text2[idx2]){
            dp[idx1][idx2] = 1+f(idx1+1, idx2+1, text1, text2, dp);
        }else{
            dp[idx1][idx2] = max(f(idx1+1, idx2, text1, text2, dp), f(idx1, idx2+1, text1, text2, dp));
        }
        return dp[idx1][idx2];
    }
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.length()+1, vector<int>(text2.length()+1, -1));
        dp[0][0] = f(0, 0, text1, text2, dp);
        return dp[0][0];
    }
};

## Tabulation:
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.length(), n2 = text2.length();
        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                int idx1 = i-1, idx2 = j-1;
                if(text1[idx1] == text2[idx2]){
                    dp[i][j] = 1+dp[i-1][j-1];
                }else{
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }  
        return dp[n1][n2];      
    }
};
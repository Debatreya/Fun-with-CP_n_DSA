Climbing Stairs:

Recursive Solution:

class Solution {
public:
    int climbStairs(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        return climbStairs(n-1) + climbStairs(n-2);
    }
};


Top-Down / Memoization Solution:

class Solution {
    int f(int n, vector<int>& dp){
        if (n == 0 || n == 1) {
            dp[n] = 1;
            return dp[n];
        }
        if(dp[n] != -1){
            return dp[n];
        }
        dp[n] = f(n-1, dp) + f(n-2, dp);
        return dp[n];
    }
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        return f(n, dp);
    }
};


Bottom Up / Iterative Solution: Space: O(n)

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        for(int i = 0; i<=n; i++){
            if(i == 0 || i == 1)
                dp[i] = 1;
            else
                dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};

Bottom Up / Iterative Solution: Space: O(1)

class Solution {
public:
    int climbStairs(int n) {
        int prev1 = 1, prev2 = 1, curr;
        for(int i = 0; i<=n; i++){
            if(i == 0 || i == 1){
                curr = 1;
                continue;
            }
            curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return curr;
    }
};
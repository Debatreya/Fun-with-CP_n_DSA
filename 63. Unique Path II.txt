# Unique Path II

### Recursive Solution
class Solution {
private:
    int f(int i, int j, vector<vector<int>>& obstacleGrid){
        if(obstacleGrid[i][j] == 1){
            return 0;
        }
        if(i == 0 and j == 0){
            return 1;
        }
        int tillTop = 0, tillLeft = 0;
        if(i > 0){
            tillTop = f(i-1, j, obstacleGrid);
        }
        if(j>0){
            tillLeft = f(i, j-1, obstacleGrid);
        }
        return tillTop+tillLeft;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        return f(m-1, n-1, obstacleGrid);
    }
};

### Memoization Solution
class Solution {
private:
    int f(int i, int j, vector<vector<int>>& obstacleGrid, vector<vector<int>>& dp){
        if(obstacleGrid[i][j] == 1){
            dp[i][j] = 0;
            return dp[i][j];
        }
        if(i == 0 and j == 0){
            dp[i][j] = 1;
            return dp[i][j];
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int tillTop = 0, tillLeft = 0;
        if(i > 0){
            tillTop = f(i-1, j, obstacleGrid, dp);
        }
        if(j > 0){
            tillLeft = f(i, j-1, obstacleGrid, dp);
        }
        dp[i][j] = tillTop + tillLeft;
        return dp[i][j];
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        dp[m-1][n-1] = f(m-1, n-1, obstacleGrid, dp);
        return dp[m-1][n-1];
    }
};

## Tabulation Solution
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1){
            return 0;
        }
        obstacleGrid[0][0] = 1;
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(i==0 and j==0) continue;
                if(obstacleGrid[i][j] == 1){
                    obstacleGrid[i][j] = 0;
                    continue;
                }
                int fromTop = 0, fromLeft = 0;
                if(i > 0){
                    fromTop = obstacleGrid[i-1][j];
                }
                if(j > 0){
                    fromLeft = obstacleGrid[i][j-1];
                }
                obstacleGrid[i][j] = fromTop + fromLeft;
            }
        }
        // cout<<endl;
        // for(int i = 0; i<m; i++){
        //     for(int j = 0; j<n; j++){
        //         cout<<obstacleGrid[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
        return obstacleGrid[m-1][n-1];
    }
};